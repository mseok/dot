return {}
-- local default_notebook = [[
--   {
--     "cells": [
--      {
--       "cell_type": "markdown",
--       "metadata": {},
--       "source": [
--         ""
--       ]
--      }
--     ],
--     "metadata": {
--      "kernelspec": {
--       "display_name": "Python 3",
--       "language": "python",
--       "name": "python3"
--      },
--      "language_info": {
--       "codemirror_mode": {
--         "name": "ipython"
--       },
--       "file_extension": ".py",
--       "mimetype": "text/x-python",
--       "name": "python",
--       "nbconvert_exporter": "python",
--       "pygments_lexer": "ipython3"
--      }
--     },
--     "nbformat": 4,
--     "nbformat_minor": 5
--   }
-- ]]
-- 
-- return {
--     {
--         "quarto-dev/quarto-nvim",
--         dependencies = {
--             "jmbuhr/otter.nvim",
--             "nvim-treesitter/nvim-treesitter",
--         },
--         init = function()
--             local quarto = require("quarto")
--             quarto.setup({
--                 lspFeatures = {
--                     -- NOTE: put whatever languages you want here:
--                     languages = { "r", "python", "rust" },
--                     chunks = "all",
--                     diagnostics = {
--                         enabled = true,
--                         triggers = { "BufWritePost" },
--                     },
--                     completion = {
--                         enabled = true,
--                     },
--                 },
--                 keymap = {
--                     -- NOTE: setup your own keymaps:
--                     hover = "H",
--                     definition = "gd",
--                     rename = "<leader>rn",
--                     references = "gr",
--                     format = "<leader>gf",
--                 },
--                 codeRunner = {
--                     enabled = true,
--                     default_method = "molten",
--                 },
--             })
--             local runner = require("quarto.runner")
--             vim.keymap.set("n", "<leader>rc", runner.run_cell, { desc = "run cell", silent = true })
--             vim.keymap.set("n", "<leader>ra", runner.run_above, { desc = "run cell and above", silent = true })
--             vim.keymap.set("n", "<leader>rA", runner.run_all, { desc = "run all cells", silent = true })
--             vim.keymap.set("n", "<leader>rl", runner.run_line, { desc = "run line", silent = true })
--             vim.keymap.set("v", "<leader>r", runner.run_range, { desc = "run visual range", silent = true })
--             vim.keymap.set("n", "<leader>RA", function()
--                 runner.run_all(true)
--             end, { desc = "run all cells of all languages", silent = true })
--         end
--     },
-- 
--     {
--         "benlubas/molten-nvim",
--         version = "^1.0.0", -- use version <2.0.0 to avoid breaking changes
--         dependencies = { "3rd/image.nvim" },
--         build = ":UpdateRemotePlugins",
--         init = function()
--             -- I find auto open annoying, keep in mind setting this option will require setting
--             -- a keybind for `:noautocmd MoltenEnterOutput` to open the output again
--             vim.g.molten_auto_open_output = false
-- 
--             -- this guide will be using image.nvim
--             -- Don't forget to setup and install the plugin if you want to view image outputs
--             vim.g.molten_image_provider = "image.nvim"
-- 
--             -- optional, I like wrapping. works for virt text and the output window
--             vim.g.molten_wrap_output = true
-- 
--             -- Output as virtual text. Allows outputs to always be shown, works with images, but can
--             -- be buggy with longer images
--             vim.g.molten_virt_text_output = true
-- 
--             -- this will make it so the output shows up below the \`\`\` cell delimiter
--             vim.g.molten_virt_lines_off_by_1 = true
-- 
--             vim.keymap.set("n", "<leader>mi", ":MoltenInit<CR>",
--                 { desc = "initialize", silent = true })
--             vim.keymap.set("n", "<leader>me", ":MoltenEvaluateOperator<CR>",
--                 { desc = "evaluate operator", silent = true })
--             vim.keymap.set("n", "<leader>mos", ":noautocmd MoltenEnterOutput<CR>",
--                 { desc = "open output window", silent = true })
--             vim.keymap.set("n", "<leader>mrr", ":MoltenReevaluateCell<CR>",
--                 { desc = "re-eval cell", silent = true })
--             vim.keymap.set("v", "<leader>mr", ":<C-u>MoltenEvaluateVisual<CR>gv",
--                 { desc = "execute visual selection", silent = true })
--             vim.keymap.set("n", "<leader>moh", ":MoltenHideOutput<CR>",
--                 { desc = "close output window", silent = true })
--             vim.keymap.set("n", "<leader>md", ":MoltenDelete<CR>",
--                 { desc = "delete Molten cell", silent = true })
-- 
--             -- if you work with html outputs:
--             vim.keymap.set("n", "<leader>mx", ":MoltenOpenInBrowser<CR>",
--                 { desc = "open output in browser", silent = true })
-- 
--             -- change the configuration when editing a python file
--             vim.api.nvim_create_autocmd("BufEnter", {
--                 pattern = "*.py",
--                 callback = function(e)
--                     if string.match(e.file, ".otter.") then
--                         return
--                     end
--                     if require("molten.status").initialized() == "Molten" then -- this is kinda a hack...
--                         vim.fn.MoltenUpdateOption("virt_lines_off_by_1", false)
--                         vim.fn.MoltenUpdateOption("virt_text_output", false)
--                     else
--                         vim.g.molten_virt_lines_off_by_1 = false
--                         vim.g.molten_virt_text_output = false
--                     end
--                 end,
--             })
-- 
--             -- Undo those config changes when we go back to a markdown or quarto file
--             vim.api.nvim_create_autocmd("BufEnter", {
--                 pattern = { "*.qmd", "*.md", "*.ipynb" },
--                 callback = function(e)
--                     if string.match(e.file, ".otter.") then
--                         return
--                     end
--                     if require("molten.status").initialized() == "Molten" then
--                         vim.fn.MoltenUpdateOption("virt_lines_off_by_1", true)
--                         vim.fn.MoltenUpdateOption("virt_text_output", true)
--                     else
--                         vim.g.molten_virt_lines_off_by_1 = true
--                         vim.g.molten_virt_text_output = true
--                     end
--                 end,
--             })
-- 
--             -- Provide a command to create a blank new Python notebook
--             -- note: the metadata is needed for Jupytext to understand how to parse the notebook.
--             -- if you use another language than Python, you should change it in the template.
--             local function new_notebook(filename)
--                 local path = filename .. ".ipynb"
--                 local file = io.open(path, "w")
--                 if file then
--                     file:write(default_notebook)
--                     file:close()
--                     vim.cmd("edit " .. path)
--                 else
--                     print("Error: Could not open new notebook file for writing.")
--                 end
--             end
-- 
--             vim.api.nvim_create_user_command('NewNotebook', function(opts)
--                 new_notebook(opts.args)
--             end, {
--                 nargs = 1,
--                 complete = 'file'
--             })
--         end,
--     },
-- 
--     {
--         -- see the image.nvim readme for more information about configuring this plugin
--         "3rd/image.nvim",
--         opts = {
--             backend = "kitty", -- whatever backend you would like to use
--             max_width = 100,
--             max_height = 12,
--             max_height_window_percentage = math.huge,
--             max_width_window_percentage = math.huge,
--             window_overlap_clear_enabled = true, -- toggles images when windows are overlapped
--             window_overlap_clear_ft_ignore = { "cmp_menu", "cmp_docs", "" },
--         },
--     },
-- 
--     -- convert jupyter notebooks to markdown
--     {
--         "GCBallesteros/jupytext.nvim",
--         config = true,
--         -- lazy=false,
--     },
-- 
--     {
--         "lkhphuc/jupyter-kernel.nvim",
--         opts = {
--             inspect = {
--                 -- opts for vim.lsp.util.open_floating_preview
--                 window = {
--                     max_width = 84,
--                 },
--             },
--             -- time to wait for kernel's response in seconds
--             timeout = 0.5,
--         },
--         cmd = { "JupyterAttach", "JupyterInspect", "JupyterExecute" },
--         build = ":UpdateRemotePlugins",
--         keys = { { "<leader>k", "<Cmd>JupyterInspect<CR>", desc = "Inspect object in kernel" } },
--     }
-- }
